===============
  TODO
===============
. Broker (Execute the strategy)
  - Watch order book
  - Receives orders from the trader
  . Design Jobs state machine
  . Handle job states
    . New:
    . ...

  . Send orders to the market
  . Watch orders progress
  . Overviews the market and determines when to cancel orders

  . Handle 503 errors => https://testnet.bitmex.com/app/restAPI#Overload
  . Amend orders!!!
  . If there is an existing position when the trader starts, close it first
    . Close other orders
  . Find best interval config to update orders

. Auditor (Tracks the bot performance)
  . Improve event queueing / nesting using setImmediate / nextTick?
  . Listens to 2 events
    . On candle closed
    . On trade accepted (short or long opened | closed) ((TradeExecuted?))
  . Logs the time elapsed
  . Audit: Pre-market ms & Time To Market

. Bugfixing
  . Chandler managed to emit 2 candles somehow, triggering a 'this should never happen'
  . CloseShort called at unexpected times
  . Auditor  said execTime was 6002.
    . Update: This could be caused by event nesting. The CandleClose event cascades other events, making the auditor use the old timestamp

===============
  Backlog
===============
. Maker Icebergs. Similar to icebergs
  . Only a small order is put on the market
  . When it's filled, other maker orders are created

. Trader
  . Consider funding before opening positions?
  . 'Magic' SL. After an open position, if the price breaks out again, try to close at a good price?
  . Check if we need to do anything on 'CloseX' msgs

. Double check with BitMEX support about auth params use case in both ws and http
  . const expires = ~~(Date.now() / 1000 + 30);

. Make paths dynamic based on the proj root
  . const logger = require('../../lib/logger');

. Dynamic modules loading
  . Load modules from an array in a config file
  . Init modules and plug them to the backbone

===============
  DONE
===============
- fetch available margin
- fetch positions
- handle deposit (update to wallet)
- track subscribe requests, and match with pendings?
- calculate usable funds
- get usable margin
- test the 'partial' load with a fresh account
- Design strategy
- Test strategy on TV

- Analyst (technical analysis)
  - Watch market
  - Cache N candles on the analyst side
  - Calculate needed indicators

- log every message that passes through the backbone to replicate the data flow platita

- Chandler (Bundle trades into ohlcvt candles)
  - Listen to live trades
  - Bundle trades into OHLCVT candles
  - Emit the CandleClosed
  - Try to enter market 10~15s before the candle closes
  - Manually accumulate candles with an offset. Instead of [0, 5, 10, 15], [1, 6, 11, 16] etc..

- Brain (finds alpha opportunities)
  - Listens to updates from the analyst
  - Implements a concrete strategy to find alpha
  - Emit buy/sell signal

- Trader (determines the concrete strategy)
  - Listen to Signals from the brain
  - Determine if we are using the funding info
  - Listen to market updates
  - Check how many open positions we have / based on how much margin is allocated
  - Calculates possible fees
  - Determines the amount of margin and leverage to use

  - Sends the Buy / Sell message
    - if open & there is enough margin left, emit Buy(X amount)
    - if close & there is a position, emit Sell(X amount)

===============
  IGNORE
===============
. Shared memory, instead of sending the full list of candles?
